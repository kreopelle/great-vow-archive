# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/dharma_talks', type: :request do
  # DharmaTalk. As you add validations to DharmaTalk, be sure to
  # adjust the attributes here as well.
  let(:speaker) { create(:speaker) }

  let(:location) { create(:location) }

  let(:valid_attributes) do
    build(:dharma_talk, speaker: speaker, location: location).attributes
  end

  let(:invalid_attributes) do
    attributes_for(:dharma_talk, title: '')
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      DharmaTalk.create! valid_attributes
      get dharma_talks_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      dharma_talk = DharmaTalk.create! valid_attributes
      get dharma_talk_url(dharma_talk)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_dharma_talk_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'render a successful response' do
      dharma_talk = DharmaTalk.create! valid_attributes
      get edit_dharma_talk_url(dharma_talk)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new DharmaTalk' do
        expect do
          post dharma_talks_url, params: { dharma_talk: valid_attributes }
        end.to change(DharmaTalk, :count).by(1)
      end

      it 'redirects to the created dharma_talk' do
        post dharma_talks_url, params: { dharma_talk: valid_attributes }
        expect(response).to redirect_to(dharma_talk_url(DharmaTalk.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new DharmaTalk' do
        expect do
          post dharma_talks_url, params: { dharma_talk: invalid_attributes }
        end.to change(DharmaTalk, :count).by(0)
      end

      it 'returns a 422 status' do
        dharma_talk = DharmaTalk.create! valid_attributes
        post dharma_talks_url, params: { dharma_talk: invalid_attributes }
        expect(response).to have_http_status(422)
      end

      it 'renders the new template' do
        dharma_talk = DharmaTalk.create! valid_attributes
        post dharma_talks_url, params: { dharma_talk: invalid_attributes }
        expect(response.body).to include('New Dharma Talk')
      end

      it 'renders the errors' do
        dharma_talk = DharmaTalk.create! valid_attributes
        post dharma_talks_url, params: { dharma_talk: invalid_attributes }
        expect(response.body).to include('error')
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        attributes_for(:dharma_talk)
      end

      it 'updates the requested dharma_talk' do
        dharma_talk = DharmaTalk.create! valid_attributes
        patch dharma_talk_url(dharma_talk), params: { dharma_talk: new_attributes }
        dharma_talk.reload
        expect(dharma_talk.title).to eq(new_attributes[:title])
      end

      it 'redirects to the dharma_talk' do
        dharma_talk = DharmaTalk.create! valid_attributes
        patch dharma_talk_url(dharma_talk), params: { dharma_talk: new_attributes }
        dharma_talk.reload
        expect(response).to redirect_to(dharma_talk_url(dharma_talk))
      end
    end

    context 'with invalid parameters' do
      it 'returns a 422 status' do
        dharma_talk = DharmaTalk.create! valid_attributes
        patch dharma_talk_url(dharma_talk), params: { dharma_talk: invalid_attributes }
        expect(response).to have_http_status(422)
      end

      it 'renders the edit template' do
        dharma_talk = DharmaTalk.create! valid_attributes
        patch dharma_talk_url(dharma_talk), params: { dharma_talk: invalid_attributes }
        expect(response.body).to include('Editing Dharma Talk')
      end

      it 'renders the errors' do
        dharma_talk = DharmaTalk.create! valid_attributes
        patch dharma_talk_url(dharma_talk), params: { dharma_talk: invalid_attributes }
        expect(response.body).to include('error')
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested dharma_talk' do
      dharma_talk = DharmaTalk.create! valid_attributes
      expect do
        delete dharma_talk_url(dharma_talk)
      end.to change(DharmaTalk, :count).by(-1)
    end

    it 'redirects to the dharma_talks list' do
      dharma_talk = DharmaTalk.create! valid_attributes
      delete dharma_talk_url(dharma_talk)
      expect(response).to redirect_to(dharma_talks_url)
    end
  end
end
