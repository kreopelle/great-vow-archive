# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/speakers', type: :request do
  # Speaker. As you add validations to Speaker, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    attributes_for(:speaker)
  end

  let(:invalid_attributes) do
    { name: '' }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Speaker.create! valid_attributes
      get speakers_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      speaker = Speaker.create! valid_attributes
      get speaker_url(speaker)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_speaker_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'render a successful response' do
      speaker = Speaker.create! valid_attributes
      get edit_speaker_url(speaker)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Speaker' do
        expect do
          post speakers_url, params: { speaker: valid_attributes }
        end.to change(Speaker, :count).by(1)
      end

      it 'redirects to the created speaker' do
        post speakers_url, params: { speaker: valid_attributes }
        expect(response).to redirect_to(speaker_url(Speaker.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Speaker' do
        expect do
          post speakers_url, params: { speaker: invalid_attributes }
        end.to change(Speaker, :count).by(0)
      end

      it 'returns a 422 status' do
        post speakers_url, params: { speaker: invalid_attributes }
        expect(response).to have_http_status(422)
      end

      it 'renders the errors' do
        post speakers_url, params: { speaker: invalid_attributes }
        expect(response.body).to include('error')
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        attributes_for(:speaker)
      end

      it 'updates the requested speaker' do
        speaker = Speaker.create! valid_attributes
        patch speaker_url(speaker), params: { speaker: new_attributes }
        speaker.reload
        expect(speaker.name).to eq(new_attributes[:name])
      end

      it 'redirects to the speaker' do
        speaker = Speaker.create! valid_attributes
        patch speaker_url(speaker), params: { speaker: new_attributes }
        speaker.reload
        expect(response).to redirect_to(speaker_url(speaker))
      end
    end

    context 'with invalid parameters' do
      it 'returns a 422 status' do
        speaker = Speaker.create! valid_attributes
        patch speaker_url(speaker), params: { speaker: invalid_attributes }
        expect(response).to have_http_status(422)
      end

      it 'renders the edit template' do
        speaker = Speaker.create! valid_attributes
        patch speaker_url(speaker), params: { speaker: invalid_attributes }
        expect(response.body).to include('Editing Speaker')
      end

      it 'renders the errors' do
        speaker = Speaker.create! valid_attributes
        patch speaker_url(speaker), params: { speaker: invalid_attributes }
        expect(response.body).to include('error')
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested speaker' do
      speaker = Speaker.create! valid_attributes
      expect do
        delete speaker_url(speaker)
      end.to change(Speaker, :count).by(-1)
    end

    it 'redirects to the speakers list' do
      speaker = Speaker.create! valid_attributes
      delete speaker_url(speaker)
      expect(response).to redirect_to(speakers_url)
    end
  end
end
